 (ns hupo.main
   (:require ["package:flutter/material.dart" :as m]
             ["package:flutter/widgets.dart" :as w]
             ["package:flutter/services.dart" :as s]
             ["dart:async" :as async]
             ["package:flutter/scheduler.dart" :as sched]
             [cljd.flutter :as f]))

(def initial-state
  {:game-started    true
   :show-rules      false
   :pieces           {:white {:a [0 0]
                              :b [1 0]
                              :c [2 0]}
                      :black {:a [0 4]
                              :b [1 4]
                              :c [2 4]}}
   :selected-piece   nil
   :last-moved-piece nil
   :fixed-piece      nil
   :ai-player       :black
   :current-player  :white
   :turn-phase      :designated-move
   :winner-piece     nil
   :turn-finished        {:white false
                          :black false}
   :turn-no         1})

(def state
  (atom {}))

(def black-color m/Colors.grey.shade700)
(def white-color m/Colors.green.shade600)
(def highlight-color m/Colors.grey.shade800)

(def board-size-x 3)
(def board-size-y 5)
(def cell-size 100)

(defn cell-widget [pos]
  (let [abyss [1 2]
        black-target [1 1]
        white-target [1 3]
        border-width 1.0
        border-color highlight-color]
    (w/Container
     .width  cell-size
     .height cell-size
     .decoration (w/BoxDecoration
                  .color (condp = pos
                           abyss m/Colors.white
                           black-target m/Colors.grey
                           white-target m/Colors.grey
                           m/Colors.grey)
                  .border (w/Border
                           .top (w/BorderSide .width border-width .color border-color)
                           .bottom (w/BorderSide .width border-width .color border-color)
                           .left (w/BorderSide .width border-width .color border-color)
                           .right (w/BorderSide .width border-width .color border-color)))
     .child (if (#{black-target white-target} pos)
              (w/Center .child (m/Text
                                "Î»"
                                .style (m/TextStyle
                                        .fontWeight m/FontWeight.bold
                                        .color (if (= black-target pos)
                                                 black-color
                                                 white-color)
                                        .fontSize 25)))
              (w/Container)))))

(defn get-piece-position [pieces selected-piece]
  (let [[color id] selected-piece]
    (get-in pieces [color id])))

(defn increase-turn-no [state]
  (if (and (-> state :turn-finished :white)
           (-> state :turn-finished :black))
    (-> state
        (update :turn-no inc)
        (assoc :turn-finished {:white false :black false}))
    state))

(defn check-winner-piece [state]
  (let [{:keys [current-player pieces]} state
        current-pieces (get pieces current-player)
        winning-pos (if (= current-player :white)
                      [1 3]
                      [1 1])]
    (reduce (fn [s [id pos]]
              (if (= pos winning-pos)
                (assoc s :winner-piece [current-player id])
                s))
            state
            current-pieces)))

(defn valid-tile? [pieces x y]
  (and (>= x 0) (< x board-size-x)
       (>= y 0) (< y board-size-y)
       (not (= [1 2] [x y]))
       (not (some (fn [[_ positions]]
                    (some (fn [[_ [px py]]]
                            (and (= px x) (= py y)))
                          positions))
                  pieces))))

(defn get-valid-tile [x y selected-piece pieces]
  (let [[sx sy] (get-piece-position pieces selected-piece)]
    (when (and (or (and (<= (abs (- x sx)) 1)
                        (<= (abs (- y sy)) 0.5))
                   (and (<= (abs (- x sx)) 0.5)
                        (<= (abs (- y sy)) 1)))
               (valid-tile? pieces x y))
      [x y])))

(defn get-valid-moves [pieces x y]
  (let [possible-moves [[0 1] [0 -1] [1 0] [-1 0]]]
    (->> possible-moves
         (map (fn [[dx dy]] [(+ x dx) (+ y dy)]))
         (filter (fn [pm] (apply #(valid-tile? pieces %1 %2) pm))))))

(defn remove-blocked-piece [{:keys [selected-piece pieces] :as state}]
  (let [[sx sy] (get-in pieces selected-piece)
        [color id] selected-piece
        valid-moves (get-valid-moves pieces sx sy)]
    (if (empty? valid-moves)
      (-> state
          (update-in [:pieces color] dissoc id)
          (assoc :selected-piece nil)
          (assoc :fixed-piece nil))
      state)))

(defn change-turn [state]
  (let [current-player (:current-player state)
        opposite-color (if (= current-player :white) :black :white)]
    (-> state
        (assoc :current-player opposite-color)
        (assoc-in [:turn-finished current-player] true)
        (increase-turn-no))))

(declare handle-ai-actions)

(defn advance-turn-phase [state]
  (let [advance-fn (fn [m] (let [turn-phase (:turn-phase m)
                                 next-phase (case turn-phase
                                              :designated-move :optional-move
                                              :optional-move :select-opponent-piece
                                              :select-opponent-piece :designated-move)
                                 last-turn (= turn-phase :select-opponent-piece)]
                             (cond-> m
                               :always (assoc :turn-phase next-phase)
                               last-turn change-turn)))]
    (-> state
        advance-fn
        handle-ai-actions)))

(defn move-piece [state x y]
  (let [{:keys [pieces selected-piece]} state
        new-pos (get-valid-tile x y selected-piece pieces)]
    (if new-pos
      (let [[color id] selected-piece
            new-state (-> state
                          (assoc-in [:pieces color id] new-pos)
                          (assoc :last-moved-piece selected-piece)
                          (assoc :selected-piece nil)
                          (assoc :fixed-piece nil)
                          (check-winner-piece)
                          (advance-turn-phase))]
        new-state)
      state)))

;; TODO - animation should start faster
(defn piece-widget [color selected]
  (let [opacity (atom 1.0)
        fcolor (if (= color :white) white-color black-color)
        toggle-opacity (fn [] (swap! opacity #(if (= % 1.0) 0.0 1.0)))]
    (when selected (async/Timer.periodic
                    (sched/Duration. .milliseconds 500)
                    (fn [timer]
                      (toggle-opacity)
                      (when (not selected) (.cancel ^async/Timer timer)))))
    (f/widget
     :watch [opacity opacity]
     (w/Container
      .width cell-size
      .height cell-size
      .child
      (w/Center
       .child
       (w/Stack
        .alignment m/Alignment.center
        .children
        [(if selected
           (w/Container
            .width cell-size
            .height cell-size
            .color m/Colors.blue)
           (w/Container))
         (w/Container
          .width (- cell-size 4)
          .height (-  cell-size 4)
          .color (if selected m/Colors.blue fcolor))
         (w/AnimatedOpacity
          .opacity opacity
          .duration (sched/Duration. .milliseconds 500)
          .child (w/Container
                  .width (- cell-size 8)
                  .height (- cell-size 8)
                  .color fcolor))]))))))

(comment
  "Was used for debugging purposes..."
  (defn message-box []
    (f/widget
     :watch [s state]
     (let [{:keys [current-player turn-phase pieces selected-piece fixed-piece winner-piece
                   last-moved-piece turn-no turn-finished]} s]
       (m/Card
        .elevation 8
        .margin (w/EdgeInsets.all 16)
        .child (w/Text
                (str "Current Player: " (name current-player)
                     "\nTurn Phase: " turn-phase
                     "\nSelected Piece: " selected-piece
                     "\n Last Moved Piece: " last-moved-piece
                     "\nFixed Piece:" fixed-piece
                     "\nPositions W: " (:white pieces)
                     "\nPositions B:" (:black pieces)
                     "\nFinished: " turn-finished
                     "\nTurn Number:" turn-no
                     "\nWinner Piece: " winner-piece
                     "\nValid Moves: " (when selected-piece
                                         (apply #(get-valid-moves pieces %1 %2)
                                                (get-in pieces selected-piece))))
                .style (w/TextStyle
                        .fontSize 18
                        .fontWeight w/FontWeight.bold)))))))

(defn first-turn-rule-white? [current-player turn-no turn-phase id]
  (if (and (= turn-no 1) (= current-player :white) (= turn-phase :designated-move))
    (= id :b)
    true))

(defn last-and-to-be-selected-different? [state selected]
  (not= (:last-moved-piece state) selected))

(defn select-piece [state color id]
  (s/SystemSound.play
   (s/SystemSoundType.click))
  (let [{:keys [current-player turn-no turn-phase fixed-piece]} state]
    (if-not fixed-piece
      (cond
        (and (= turn-phase :select-opponent-piece)
             (not= current-player color))
        (-> state
            (assoc :selected-piece [color id])
            (assoc :fixed-piece [color id])
            (remove-blocked-piece)
            (advance-turn-phase))

        (and (= current-player color)
             (#{:designated-move :optional-move} turn-phase)
             (last-and-to-be-selected-different? state [color id])
             (first-turn-rule-white? current-player turn-no turn-phase id))
        (assoc state :selected-piece [color id])

        :else state)
      state)))

;; TODO - finish AI
(defn ai-select-piece [state]
  (let [{:keys [ai-player pieces last-moved-piece]} state
        pieces (get pieces ai-player)
        [color id] last-moved-piece
        last-moved-id (when (= ai-player color) id)
        id (rand-nth (disj (set (keys pieces)) last-moved-id))]
    (assoc state :selected-piece [:black id])))

(defn manhattan-distance [v1 v2]
  (+ (abs (- (first v1) (first v2)))
     (abs (- (second v1) (second v2)))))

(defn get-best-move [target-vector valid-moves]
  (first
   (sort-by #(manhattan-distance target-vector %) valid-moves)))

(defn ai-move-piece [state]
  (if-let [selected-piece (:selected-piece state)]
    (let [{:keys [pieces]} state
          [sx sy] (get-in pieces selected-piece)
          target-vector (if (= (:current-player state) :white) [1 3] [1 1])
          [x y] (get-best-move target-vector (get-valid-moves pieces sx sy))]
      (move-piece state x y))
    state))

(defn ai-select-opponent-piece [state]
  (let [pieces (get-in state [:pieces :white])
        [id pos] (rand-nth (seq pieces))]
    (select-piece state :white id)))

;; TODO - slow it down (delay)
;; TODO - clicking on opposite pawn doesn't always work
(defn handle-ai-actions [state]
  (let [{:keys [current-player turn-phase ai-enabled selected-piece winner-piece]} state]
    (if (and ai-enabled (= current-player :black) (not winner-piece))
      (case turn-phase
        :designated-move (if (vector? selected-piece)
                           (ai-move-piece state)
                           (-> state (ai-select-piece) (ai-move-piece)))
        :optional-move (-> state (ai-select-piece) (ai-move-piece))
        :select-opponent-piece (ai-select-opponent-piece state)
        state)
      state)))

;; END OF AI

(defn show-rules-button [ctx state]
  (m/ElevatedButton
   .onPressed #(do (swap! state assoc :show-rules true)
                   (m/Navigator.pop ctx))
   .child (m/Text "Show rules")))

(defn reset-game-button [ctx state]
  (m/ElevatedButton
   .onPressed #(do (swap! state merge initial-state)
                   (m/Navigator.pop ctx))
   .child (m/Text "Reset game!")))

(defn quit-game-button [ctx state]
  (m/ElevatedButton
   .onPressed #(do (swap! state merge (assoc initial-state :game-started false))
                   (m/Navigator.pop ctx))
   .child (m/Text "Main menu")))

;; TODO - rewrite, maybe use grid widget...
(defn board-widget [state]
  (f/widget
   :watch [s state]
   (let [{:keys [pieces selected-piece]} s
         [selected-color selected-id] selected-piece]
     (m/Padding
      .padding (m/EdgeInsets.only .top 40.0)
      .child
      (w/Stack
       .alignment m/Alignment.center
       .children
       [(w/Container
         .width (+ 40 (* cell-size 3))
         .height (+ 40 (* cell-size 5))
         .color m/Colors.grey
         .child (m/Row
                 .crossAxisAlignment m/CrossAxisAlignment.start
                 .mainAxisAlignment m/MainAxisAlignment.spaceBetween
                 .children
                 (concat
                  [(m/Padding
                    .padding (m/EdgeInsets.only .left 5.0)
                    .child
                    (m/Column
                     .mainAxisAlignment m/MainAxisAlignment.spaceEvenly
                     .children
                     (for [i (range 1 6)]
                       (m/Text (str i) .style (m/TextStyle .color highlight-color)))))]
                  (for [s ["A" "B" "C" ""]]
                    (m/Text s .style (m/TextStyle .color highlight-color))))))
        (w/Container
         .width (* cell-size 3) ;;240 without box
         .height (* cell-size 5)
         .child
         (m/Column
          .children
          [(w/Stack
            .children
            (apply conj
                   [(m/Row
                     .children
                     (for [x (range board-size-x)]
                       (m/Column
                        .children
                        (for [y (range board-size-y)]
                          (w/GestureDetector
                           .onTap #(when selected-piece
                                     (swap! state move-piece x y))
                           .child (cell-widget [x y]))))))]
                   (for [[color positions] pieces
                         [id [x y]] positions]
                     (let [selected (and (= selected-color color)
                                         (= selected-id id))]
                       (f/widget
                        :key (str color "-" id)
                        (w/AnimatedPositioned
                         .left (* x cell-size)
                         .top (* y cell-size)
                         .duration (m/Duration. .seconds 1)
                         .child (w/GestureDetector
                                 .onTap #(when-not (:winner-piece s) (swap! state select-piece color id))
                                 .child (piece-widget color selected))))))))]))])))))

(defn main-menu [state]
  (w/Container
   .child
   (m/Center
    .child
    (m/Column
     .children
     [(m/Image
       .image (m/AssetImage. "assets/images/logo.jpg"))
      (m/Padding
       .padding (m/EdgeInsets.all 16.0)
       .child
       (m/ElevatedButton
        .onPressed #(reset! state initial-state)
        .child (m/Text "2 Players"
                       .style (w/TextStyle
                               .fontSize 18
                               .fontWeight w/FontWeight.bold))))
      (m/ElevatedButton
       .onPressed #(reset! state (assoc initial-state :ai-enabled true))
       .child (m/Text "vs AI (ALPHA)"
                      .style (w/TextStyle
                              .fontSize 18
                              .fontWeight w/FontWeight.bold)))]))))

(defn skip-turn-button [state]
  (m/ElevatedButton
   .onPressed #(swap! state advance-turn-phase)
   .child (m/Text "Skip turn!")))

(defn info-box [state]
  (f/widget
   :watch [s state]
   (let [{:keys [current-player turn-phase selected-piece winner-piece turn-no]} s
         first-turn (= turn-no 1)
         white (= current-player :white)
         black (= current-player :black)
         dm (= turn-phase :designated-move)
         om (= turn-phase :optional-move)
         sop (= turn-phase :select-opponent-piece)
         winner (when-let [[_color id] winner-piece]
                  id)
         color (if white white-color black-color)
         text (cond
                winner                    "WINNER!!!"
                (and first-turn dm white) "Select a square on B1 and move it to B2."
                (and first-turn dm black) "Move by a selected square."
                (and first-turn om)       "Select your other square and move it."
                sop                       "Choose an opponent square."
                (and selected-piece dm)   "Move by a selected square."
                dm                        "Select your square."
                om                        "Select your other square and move it."
                :else
                "")]
     (when text
       (m/Container
        .width (* 4 cell-size)
        .child
        (m/Card
         .elevation 4
         .margin (w/EdgeInsets.all 14)
         .child (m/Padding
                 .padding (m/EdgeInsets.all 16.0)
                 .child (m/Column
                         .children
                         [(w/Text text
                                  .style (w/TextStyle
                                          .fontSize 16
                                          .color color
                                          .fontWeight w/FontWeight.bold))
                          (if (and om (not first-turn) (not winner))
                            (skip-turn-button state)
                            (m/Container))]))))))))

(defn rules-dialog [state]
  (m/Container
   .width 400
   .height 300
   .child
   (m/Scrollbar
    .child
    (m/SingleChildScrollView
     .child
     (m/Card
      .color m/Colors.grey.shade200
      .child (m/Column
              .crossAxisAlignment m/CrossAxisAlignment.start
              .children
              [(m/Row
                .mainAxisAlignment m/MainAxisAlignment.center
                .children [(m/ElevatedButton
                            .onPressed #(swap! state assoc :show-rules false)
                            .child (m/Text "X"))])
               (m/Text "Objective:"
                       .style (m/TextStyle
                               .fontWeight w/FontWeight.bold))
               (m/Text "â¢ GREEN - Move a piece to B4 (Î»)."
                       .style (m/TextStyle
                               .color white-color))
               (m/Text "â¢ BLACK - Move a piece to B2 (Î»)."
                       .style (m/TextStyle
                               .color black-color))
               (m/SizedBox .height 16)

               (m/Text "First Moves:"
                       .style (m/TextStyle
                               .fontWeight w/FontWeight.bold))
               (m/Text "GREEN:\n1. Required move from B1 to B2\n2. Move a different piece\n3. Select Black's piece"
                       .style (m/TextStyle
                               .color white-color))
               (m/SizedBox .height 8)
               (m/Text "BLACK:\n1. Move the selected piece\n2. Move a different piece\n3. Select Green's piece."
                       .style (m/TextStyle
                               .color black-color))
               (m/SizedBox .height 16)

               (m/Text "Turn Structure:"
                       .style (m/TextStyle
                               .fontWeight w/FontWeight.bold))
               (m/Text "1. Move a piece chosen by the opponent.")
               (m/Text "2. Optionally move another piece.")
               (m/Text "3. Select an opponent's piece for the next move.")
               (m/SizedBox .height 16)

               (m/Text "Movement Restrictions:"
                       .style (m/TextStyle
                               .fontWeight w/FontWeight.bold))
               (m/Text "â¢ The cell in the middle (B3) is off-limits.")
               (m/SizedBox .height 16)

               (m/Text "Combat:"
                       .style (m/TextStyle
                               .fontWeight w/FontWeight.bold))
               (m/Text "â¢ Selected unmovable pieces are removed!")
               (m/SizedBox .height 16)

               (m/Text "Victory:"
                       .style (m/TextStyle
                               .fontWeight w/FontWeight.bold))
               (m/Text "â¢ First to reach their lambda cell wins.")

               (m/Text "â¢ Losing all pieces results in defeat.")]))))))

(defn action-menu [ctx state]
  (m/Column
   .children [(m/IconButton
               .icon (m/Icon m/Icons.menu)
               .onPressed (fn []
                            (m/showModalBottomSheet
                             .context ctx
                             .builder
                             (f/build
                              (m/Padding .padding (m/EdgeInsets.all 16))
                              (m/Row
                               .mainAxisAlignment m/MainAxisAlignment.center
                               .children
                               [(show-rules-button ctx state)
                                (reset-game-button ctx state)
                                (quit-game-button ctx state)])))
                            nil))]))

(defn main []
  (f/run
   (m/MaterialApp
    .title "Hupo"
    .home (m/Scaffold
           .appBar (m/AppBar .title (m/Text "Hupo"))
           .body
           (f/widget
            :context ctx
            :watch [s state]
            (if (:game-started s)
              (m/Column
               .children
               [(w/Stack
                 .alignment m/Alignment.topCenter
                 .children
                 [(board-widget state)
                  (if (:show-rules s)
                    (rules-dialog state)
                    (m/Container))])
                (action-menu ctx state)
                (info-box state)
                (m/Spacer)])
              (main-menu state)))))))
